name: image_build
on:
  workflow_dispatch:
  schedule:
    - cron:  '30 2 * * *'

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    steps:
      - 
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}
      - 
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYYMMDDHHmm'
      - 
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.time.outputs.time }}
          release_name: Release ${{ steps.time.outputs.time }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_id: ${{ steps.release.outputs.id }}

  release:
    runs-on: ubuntu-20.04
    needs: prepare_release
    strategy:
      matrix:
        EDITION: [phosh]
        BRANCH: [unstable]
    steps:
      - 
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}
      - 
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYYMMDD'
      -
        name: install-arm-tools
        run: |
          sudo apt-get update
          sudo apt install gdisk zip systemd-container bmap-tools asciidoc libarchive-tools qemu-utils qemu-efi-aarch64 qemu-system-arm qemu-user-static
          
          touch /etc/makepkg.conf
          
          sudo wget https://gitlab.manjaro.org/packages/community/manjaro-arm-qemu-static/-/raw/master/qemu-static.conf -O /usr/lib/binfmt.d/qemu-static.conf
          sudo service systemd-binfmt restart
          
          pkgver=23
          sudo wget https://git.archlinux.org/arch-install-scripts.git/snapshot/arch-install-scripts-$pkgver.tar.gz
          sudo tar -xvf arch-install-scripts-$pkgver.tar.gz
          sudo make -C arch-install-scripts-$pkgver
          sudo make -C arch-install-scripts-$pkgver check
          sudo make -C arch-install-scripts-$pkgver PREFIX=/usr install

          sudo git clone https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools.git

          install_m_a_tools() {
              pkgname=manjaro-arm-tools
              sudo install -dm777 /usr/share/$pkgname/lib
              sudo install -dm777 /usr/share/$pkgname/profiles
              sudo install -d /etc/$pkgname/
              sudo install -dm777 /var/lib/$pkgname/{pkg,img,tmp,profiles}
              sudo install -dm777 /var/cache/$pkgname/{pkg/pkg-cache,img}
              sudo install -Dm755 $pkgname/lib/* /usr/share/$pkgname/lib/
              sudo install -Dm755 $pkgname/bin/* /usr/bin/
              sudo install -Dm755 $pkgname/lib/manjaro-arm-tools.conf /etc/manjaro-arm-tools/
          }
          install_m_a_tools
          
          sudo sed -i -e 's|1>/dev/null||g' /usr/share/manjaro-arm-tools/lib/functions.sh   
          sudo sed -i -e 's|1> /dev/null 2>&1||g' /usr/share/manjaro-arm-tools/lib/functions.sh
      - 
        name: checkout
        uses: actions/checkout@v2
        with:
          repository: manjaro-pinephone/arm-profiles
          token: "${{ secrets.GITHUB_TOKEN }}"
          path: 'arm-profiles'          
      -
        name: build
        env:
          EDITION: ${{ matrix.EDITION }}
          BRANCH: ${{ matrix.BRANCH }}
          VERSION: dev-${{ steps.time.outputs.time }}
        run: |
          sudo mv -v /home/runner/work/phosh-dev/phosh-dev/arm-profiles /usr/share/manjaro-arm-tools/profiles
          sudo buildarmimg -d pinephone -e $EDITION -v $VERSION -b $BRANCH
          
          FILE_PATH=$(find /var/cache/manjaro-arm-tools/img -type f -name "*.img.xz" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
          cp -v $FILE_PATH .
          
          sha256sum $FILE_PATH > $(basename $FILE_PATH).sha256

          echo "FILE_PATH=$(basename $FILE_PATH)" >> $GITHUB_ENV
          echo "FILE_SHA256=$(basename $FILE_PATH).sha256" >> $GITHUB_ENV
          
          FILE_PKG=$(find /var/cache/manjaro-arm-tools/img -type f -name "*-pkgs.txt" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
          cp -v $FILE_PKG .
          zip $(basename $FILE_PKG).zip $(basename $FILE_PKG)

          echo "FILE_PKG=$(basename $FILE_PKG).zip" >> $GITHUB_ENV
      - 
        id: upload_release 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./${{ env.FILE_PATH }}
          asset_name: ${{ env.FILE_PATH }}
          asset_content_type: application/x-iso-image
      - 
        id: upload_sha256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./${{ env.FILE_SHA256 }}
          asset_name: ${{ env.FILE_SHA256 }}
          asset_content_type: text/plain
      - 
        id: upload_pkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./${{ env.FILE_PKG }}
          asset_name: ${{ env.FILE_PKG }}
          asset_content_type: text/plain                    
      - 
        name: rollback_release
        if: failure()
        uses: author/action-rollback@stable
        with:
          release_id: ${{ needs.prepare_release.outputs.release_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
